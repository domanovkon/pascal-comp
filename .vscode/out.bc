; ModuleID = 'main'
source_filename = "main"

@0 = private unnamed_addr constant [7 x i8] c"result\00", align 1
@1 = private unnamed_addr constant [11 x i8] c"%f%i%i%i%s\00", align 1

define internal i64 @div(i64 %a, i64 %b) {
entry:
  %0 = alloca i64
  store i64 %a, i64* %0
  %1 = alloca i64
  store i64 %b, i64* %1
  %2 = load i64, i64* %0
  %3 = load i64, i64* %1
  %subtmp = sub i64 %2, %3
  ret i64 %subtmp
}

define internal i64 @sum2(i64 %a, i64 %b) {
entry:
  %0 = alloca i64
  store i64 %a, i64* %0
  %1 = alloca i64
  store i64 %b, i64* %1
  %2 = load i64, i64* %0
  %3 = load i64, i64* %1
  %addtmp = add i64 %2, %3
  ret i64 %addtmp
}

define void @main() {
entry:
  %x = alloca i64
  %y = alloca i64
  %z = alloca double
  store i64 2, i64* %x
  %calltmp = call i64 @sum2(i64 102, i64 4)
  store i64 %calltmp, i64* %y
  %calltmp1 = call i64 @sum2(i64 1, i64 2)
  br i1 true, label %then, label %ifcont

then:                                             ; preds = %entry
  %calltmp2 = call i64 @sum2(i64 1000, i64 8)
  store i64 %calltmp2, i64* %y
  br label %ifcont

ifcont:                                           ; preds = %then, %entry
  %calltmp3 = call i64 @div(i64 3, i64 1)
  %0 = load i64, i64* %y
  %cmptmp = icmp ne i64 %calltmp3, %0
  %1 = icmp ne i1 %cmptmp, false
  br i1 %1, label %then4, label %else

then4:                                            ; preds = %ifcont
  store double 8.880000e+02, double* %z
  br label %ifcont5

else:                                             ; preds = %ifcont
  store double 9.990000e+02, double* %z
  br label %ifcont5

ifcont5:                                          ; preds = %else, %then4
  %2 = load double, double* %z
  %3 = load i64, i64* %y
  %4 = load i64, i64* %x
  %calltmp6 = call i64 @div(i64 %4, i64 99)
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i32 0, i32 0), double %2, i64 %3, i64 %calltmp6, i64 10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)
